debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
mammals_meanRate
insects_meanRate
insects_minRate
insects_maxRate
debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
insects_meanRate
insects_maxRate
insects_minRate
mammals_crossPointsMean
mammals_numGensMean
mammals_meanRate
insects_meanRate
insects_meanRate
debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
mammals_meanRate
insects_meanRate
mammals_minRate
mammals_maxRate
insects_minRate
insects_maxRate
debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
source('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
# Open packages
library(TreeSim)
library(phytools)
library(seqinr)
library(ape)
library(phangorn)
library(base)
library(tictoc)
# Set working directory
maindir <- "/Users/caitlincherryh/Documents/Repositories/treelikeness/" # for work computer
setwd(maindir)
# Source files for functions
source(paste0(maindir,"code/split_decomposition.R"))
source(paste0(maindir,"code/parametric_bootstrap.R"))
source(paste0(maindir,"code/test_statistic.R"))
source(paste0(maindir,"code/create_alignments.R"))
# Create alignments
simbac_path <- "/Users/caitlincherryh/Documents/Repositories/SimBac/SimBac"
output_folder <- "/Users/caitlincherryh/Documents/Repositories/treelikeness/raw_data/testAlignments/"
ntaxa <- 20
nsites <- 1300
gap <- 1000000
mutation_rate <- 0.01
id <- "tests"
# Add extra parameters needed to create the phylogenetic alignments
birth_rate = 0.5
death_rate = 0
tree_age = 1
mol_rate = 0.1
mol_rate_sd = 0.1
K_vector = c(0,0.01,0.05,0.1,0.5) # proportion of second tree in the mosaic alignment (here 0 - 50% in 1% increments for a total of 51 alignments. Must be in decimals)
phylo.make1(output_folder, ntaxa, nsites, birth_rate, death_rate, tree_age, mol_rate, mol_rate_sd, K_vector,id)
source(paste0(maindir,"code/create_alignments.R"))
phylo.make1(output_folder, ntaxa, nsites, birth_rate, death_rate, tree_age, mol_rate, mol_rate_sd, K_vector,id)
source(paste0(maindir,"code/create_alignments.R"))
phylo.make1(output_folder, ntaxa, nsites, birth_rate, death_rate, tree_age, mol_rate, mol_rate_sd, K_vector,id)
source(paste0(maindir,"code/create_alignments.R"))
phylo.make1(output_folder, ntaxa, nsites, birth_rate, death_rate, tree_age, mol_rate, mol_rate_sd, K_vector,id)
phylo.make1(output_folder, ntaxa, nsites, birth_rate, death_rate, tree_age, mol_rate, mol_rate_sd, K_vector,id)
strsplit("Phylo_20_1300_1_1J_tests.nexus","/")
tail(strsplit("Phylo_20_1300_1_1J_tests.nexus","/")[[1]],1)
strsplit(tail(strsplit("Phylo_20_1300_1_1J_tests.nexus","/")[[1]],1),".")[[1]][1]
strsplit(tail(strsplit("Phylo_20_1300_1_1J_tests.nexus","/")[[1]],1),"\\.")[[1]][1]
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
# Set alignment directory
aldir <- "/Users/caitlincherryh/Documents/Repositories/treelikeness/raw_data/testAlignments/"
ls(aldir)
ls("/Users/caitlincherryh/Documents/Repositories/treelikeness/raw_data/testAlignments/")
# Run IQ-tree in each alignment
# Get the list of files in the folder
test_folder <- "/Users/caitlincherryh/Documents/Repositories/treelikeness/raw_data/testAlignments/"
alignments <- paste0(test_folder,list.files(test_folder))
alignments
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
?write.fasta
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
K_vector=c()
# 1. Simulate a tree
# simulate a birth-death tree on a fixed number of extant taxa
# n = number of taxa, numbsim = # of trees to simulate, lambda = speciation rate [good default = 0.5 from Duchenne and Lanfear (2015)]
# mu = extinction rate (default for this project = 0)
tree_sim <- sim.bd.taxa.age(n = ntaxa, numbsim = 1, lambda = birth_rate, mu = death_rate, frac = 1, age = tree_age, mrca = FALSE)[[1]]
tree_sim$edge.length <- tree_sim$edge.length * (tree_age / max(branching.times(tree_sim)))
# 2. Simulate rate variation
# Default for mol_rate and mol_rate_sd = 0.1 as in Duchenne and Lanfear (2015)
phylo_sim <- tree_sim
phylo_sim$edge.length <- tree_sim$edge.length * rlnorm(length(tree_sim$edge.length), meanlog = log(mol_rate), sdlog = mol_rate_sd)
# scale tree to have a total depth of tree age
phylo_sim <- rescale(phylo_sim,"depth",tree_age)
phylo_sim
dna_sim <- as.DNAbin(simSeq(phylo_sim),l = nsites) # simulating along the tree
output_name <- paste0(output_folder,"Phylo_",ntaxa,"_",nsites,"_",tree_age,"_noRecombination_",id,".fasta") # for trees with no recombination
dna_sim
names(dna_sim)
names(phylo_sim)
dna_sim$labels
dna_sim$Labels
dna_sim <- as.DNAbin(simSeq(phylo_sim,l = nsites)) # simulating along the tree
output_name <- paste0(output_folder,"Phylo_",ntaxa,"_",nsites,"_",tree_age,"_noRecombination_",id,".fasta") # for trees with no recombination
dna_sim
names(da_sim)
phylo_sim
str(phylo_sim)
phylo_sim$tip.label
dna_sim <- as.DNAbin(simSeq(phylo_sim,l = nsites)) # simulating along the tree
output_name <- paste0(output_folder,"Phylo_",ntaxa,"_",nsites,"_",tree_age,"_noRecombination_",id,".fasta") # for trees with no recombination
write.fasta(sequences = dna_sim, names = phylo_sim$tip.label, file.out = output_name) # output data as a nexus file
write.fasta(sequences = dna_sim, names = phylo_sim$tip.label, file.out = output_name) # output data as a nexus file
output_NAME
output_name
?write.nexus.data
dna_sim
dna_sim <- as.DNAbin(simSeq(phylo_sim,l = nsites)) # simulating along the tree
output_name <- paste0(output_folder,"Phylo_",ntaxa,"_",nsites,"_",tree_age,"_noRecombination_",id,".nexus") # for trees with no recombination
#write.fasta(sequences = dna_sim, names = phylo_sim$tip.label, file.out = output_name) # output data as a fasta file
write.nexus.data(dna_sim,file=output_name,format = "dna",interleaved = FALSE)
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
# open the nexus file and delete the interleave = YES part
nexus <- readLines(output_name)
output_name
output_name <- "/Users/caitlincherryh/Documents/Repositories/treelikeness/raw_data/testAlignments/Phylo_20_1300_1_J0.9_tests.nexus"
# open the nexus file and delete the interleave = YES part
nexus <- readLines(output_name)
nexus
ind <- grep("FORMAT DATATYPE",nexus)
ind
nexus[ind] <- "  FORMAT DATATYPE=DNA MISSING=? GAP=- INTERLEAVE;"
nexus
writeLines(nexus,output_name) # output the edited nexus file
output_name
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
