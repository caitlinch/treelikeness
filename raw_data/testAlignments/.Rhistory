debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
mammals_meanRate
insects_meanRate
insects_minRate
insects_maxRate
debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
insects_meanRate
insects_maxRate
insects_minRate
mammals_crossPointsMean
mammals_numGensMean
mammals_meanRate
insects_meanRate
insects_meanRate
debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
mammals_meanRate
insects_meanRate
mammals_minRate
mammals_maxRate
insects_minRate
insects_maxRate
debugSource('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
source('~/Documents/Repositories/treelikeness/code/recombination_estimate.R')
# Function to create a file name for the SplitsTree output
splits.filename <- function(alignment_path){
suffix <- tail(strsplit(alignment_path,"\\.")[[1]],1) # get the file extension from the filename
# Create a identifiable name for the output file from splitstree
if (suffix == "fasta"){
# Add "_splits" into the filename (so can find file later)
output_path <- gsub(".fasta","_splits.fasta",alignment_path)
}
if (suffix == "nexus"){
# Add "_splits" into the filename (so can find file later)
output_path <- gsub(".nexus","_splits.nexus",alignment_path)
}
return(output_path)
}
# Run split decomposition using SplitsTree
call.SplitsTree <- function(splitstree_path,alignment_path){
output_path <- splits.filename(alignment_path)
# Call splitstree and do the split decomposition, save the results (overwrite any existing results)
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME EqualAngle UseWeights=true RunConvexHull=true DaylightIterations=0 SpringEmbedderIterations=0 OptimizeBoxesIterations=0 distTransform=SplitDecomposition; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
print(splitstree_command)
#system(splitstree_command)
}
# Files for SplitsTree practice
alignment_path <- "/Users/caitlincherryh/Documents/test_splitstree/Phylo_20_1300_1_K0.5_tests.nexus"
splitstree_path <- "/Users/caitlincherryh/Documents/test_splitstree/SplitsTree.app/Contents/MacOS/JavaApplicationStub"
splitstree_output <- "/Users/caitlincherryh/Documents/test_splitstree/Phylo_20_1300_1_K0.5_tests_splits.nexus"
call.SplitsTree((splitstree_path,alignment_path))
call.SplitsTree(splitstree_path,alignment_path)
# Run split decomposition using SplitsTree
call.SplitsTree <- function(splitstree_path,alignment_path){
output_path <- splits.filename(alignment_path)
# Call splitstree and do the split decomposition, save the results (overwrite any existing results)
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P splitstransform = EqualAngle UseWeights=true RunConvexHull=true DaylightIterations=0 SpringEmbedderIterations=0 OptimizeBoxesIterations=0 distTransform=SplitDecomposition ReticulateTransform=ReticulateEqualAngle; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
print(splitstree_command)
#system(splitstree_command)
}
call.SplitsTree(splitstree_path,alignment_path)
# Run split decomposition using SplitsTree
call.SplitsTree <- function(splitstree_path,alignment_path){
output_path <- splits.filename(alignment_path)
# Call splitstree and do the split decomposition, save the results (overwrite any existing results)
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P splitstransform = EqualAngle UseWeights=true RunConvexHull=true DaylightIterations=0 SpringEmbedderIterations=0 OptimizeBoxesIterations=0 distTransform=SplitDecomposition ReticulateTransform=ReticulateEqualAngle; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P distTransform=SplitDecomposition; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
print(splitstree_command)
#system(splitstree_command)
}
call.SplitsTree(splitstree_path,alignment_path)
# Run split decomposition using SplitsTree
call.SplitsTree <- function(splitstree_path,alignment_path){
output_path <- splits.filename(alignment_path)
# Call splitstree and do the split decomposition, save the results (overwrite any existing results)
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P splitstransform = EqualAngle UseWeights=true RunConvexHull=true DaylightIterations=0 SpringEmbedderIterations=0 OptimizeBoxesIterations=0 distTransform=SplitDecomposition ReticulateTransform=ReticulateEqualAngle; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P HandleAmbiguousStates=Ignore Normalize=true distTransform=SplitDecomposition; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
print(splitstree_command)
#system(splitstree_command)
}
call.SplitsTree(splitstree_path,alignment_path)
# Run split decomposition using SplitsTree
call.SplitsTree <- function(splitstree_path,alignment_path){
output_path <- splits.filename(alignment_path)
# Call splitstree and do the split decomposition, save the results (overwrite any existing results)
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P splitstransform = EqualAngle UseWeights=true RunConvexHull=true DaylightIterations=0 SpringEmbedderIterations=0 OptimizeBoxesIterations=0 distTransform=SplitDecomposition ReticulateTransform=ReticulateEqualAngle; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P HandleAmbiguousStates=Ignore Normalize=true disttransform=SplitDecomposition; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
print(splitstree_command)
#system(splitstree_command)
}
call.SplitsTree(splitstree_path,alignment_path)
# Run split decomposition using SplitsTree
call.SplitsTree <- function(splitstree_path,alignment_path){
output_path <- splits.filename(alignment_path)
# Call splitstree and do the split decomposition, save the results (overwrite any existing results)
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P splitstransform = EqualAngle UseWeights=true RunConvexHull=true DaylightIterations=0 SpringEmbedderIterations=0 OptimizeBoxesIterations=0 distTransform=SplitDecomposition ReticulateTransform=ReticulateEqualAngle; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
splitstree_command <- paste0(splitstree_path, " -g -x 'OPEN FILE=", alignment_path,"; ASSUME chartransform =Uncorrected_P HandleAmbiguousStates=Ignore Normalize=true; ASSUME disttransform=SplitDecomposition; SAVE FILE=", output_path," REPLACE=yes; QUIT'")
print(splitstree_command)
#system(splitstree_command)
}
call.SplitsTree(splitstree_path,alignment_path)
?read.fasta
# Open packages
library(TreeSim)
library(phytools)
library(seqinr)
library(ape)
library(phangorn)
library(base)
library(RSplitsTree)
library(tictoc)
?read.fasta
?write.nexus.data
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
df
View(df)
warnings()
source('~/Documents/Repositories/treelikeness/code/0_practiceSimulatingAndTests.R')
